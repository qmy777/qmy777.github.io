{"pages":[{"title":"","text":"申请友链须知 原则上只和技术类博客交换，但不包括含有和色情、暴力、政治敏感的网站。 不和剽窃、侵权、无诚信的网站交换，优先和具有原创作品的网站交换。 申请请提供：站点名称、站点链接、站点描述、logo或头像（不要设置防盗链）。 排名不分先后，刷新后重排，更新信息后请留言告知。 会定期清理很久很久不更新的、不符合要求的友链，不再另行通知。 本站不存储友链图片，如果友链图片换了无法更新。图片裂了的会替换成默认图，需要更换的请留言告知。 本站友链信息如下，申请友链前请先添加本站信息： 网站图标：https://removeif.github.io/images/avatar.jpg 网站名称：辣椒の酱 网站地址：https://removeif.github.io 网站简介：后端开发，技术分享 加载中，稍等几秒...","link":"/friend/index.html"},{"title":"","text":"唐艺昕 李沁 李一桐 gakki 图片搜集于互联网，侵权请留言，马上处理😊。","link":"/album/index.html"},{"title":"","text":"&nbsp;&nbsp;听听音乐 音乐播放器由mePlayer提供，布局参照网友博客所作，感谢作者的辛勤付出。更多音乐分享请查看歌单。 &nbsp;&nbsp;看看视频 ->点击以下条目开始播放视频,向下滑动查看更多","link":"/media/index.html"},{"title":"","text":"来而不往非礼也畅所欲言，有留必应","link":"/message/index.html"},{"title":"","text":"个人简介 分享很喜欢的老罗的一段话： “每一个生命来到世间都注定改变世界，别无选择。要么变得好一点，要么变得坏一点。你如果走进社会为了生存为了什么不要脸的理由，变成了一个恶心的成年人社会中的一员，那你就把这个世界变得恶心了一点点。如果你一生刚正不阿，如果你一生耿直，没有做任何恶心的事情，没做对别人有害的事情，一辈子拼了老命勉强把自己身边的几个人照顾好了，没有成名没有发财，没有成就伟大的事业，然后耿着脖子一生正直，到了七八十岁耿着脖子去世了。你这一生是不是没有改变世界？你还是改变世界了，你把这个世界变得美好了一点点。因为世界上又多了一个好人。“ 善恶终有报,天道好轮回。不信抬头看,苍天饶过谁。无论何时何地，我们都要保持一颗积极乐观、善良感恩的心。但行好事莫问前程，永远年轻，永远热内盈眶，永远保持正能量。💪💪💪💪💪💪冲鸭！！！！ -&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;个人信息：计算机科学与技术专业从事JAVA后端开发码畜一枚坚信代码改变世界 博客信息 网站采用的Icarus主题 追求尽可能的简洁，清晰，易用。 在Icarus主题之上进行了部分修改。 更新日志：–2020.01.18：icarus3.0适配–2019.11.17：增加深色主题开关–2019.10.30：去图，精简卡片–2019.10.22：改版部分显示，优化速度–2019.10.16：文章列表加上评论数显示–2019.10.13：改版评论–2019.09.25：图片、资源接入CDN免费jsDelivr、文章加入置顶–2019.09.19：开源博客代码–2019.09.19：修改布局，拉伸布局，更宽的展示–2019.09.18：修改友链ui为一行三个，并适配移动端，暗黑模式文章增加评论链接，增加留言链接–2019.09.14：增加精简next主题–2019.09.14：利用中秋节放假，重做了首页的热门推荐、加个widget最新评论框、归档页加入文章贡献概览面板 本站推荐索引 博客主题相关 github Issue 作为博客微型数据库的应用 github page网站cdn优化加速 博客源码分享 博客换肤的一种实现方式思路 博客中gitalk最新评论的获取 博客图片上传picgo工具github图传使用 安装、部分配置icarus主题中文版 技术知识点 Java并发知识点 法律法规 法律法规数据库 中华人民共和国国旗法 中华人民共和国宪法 中华人民共和国消费者权益保护法 中华人民共和国刑事诉讼法 中华人民共和国婚姻法 中华人名共和国网络安全法 中华人民共和国劳动法 其他 网易云音乐歌单分享 计划2020计划 2019.12.31 2020-GOALS 跑两三场马拉松 2019计划 2018.12.31/21:59:00-&gt;更新于2019.12.31 2019-GOALS 购买的专业书籍至少看完一遍（并发、重构、设计模式…）-&gt; 95% 额外： 追了很多剧 总结： 有优点有缺点，没坚持下来的还是太多，追了太多剧。以后多学习，多思考！ 时间轴记录","link":"/about/index.html"},{"title":"音乐歌单收藏","text":"--- 温馨提示：选择喜欢的音乐双击播放，由于版权原因部分不能播放。如果喜欢歌单收藏一下，去网易云都能播放哟！","link":"/music/index.html"},{"title":"","text":"碎碎念 tips：github登录后按时间正序查看、可点赞加❤️、本插件地址..「+99次查看」 碎碎念加载中，请稍等... $.getScript(\"/js/gitalk_self.min.js\", function () { var gitalk = new Gitalk({ clientID: clientId, clientSecret: clientSecret, id: '666666', repo: 'issue_database', owner: 'removeif', admin: \"removeif\", createIssueManually: true, distractionFreeMode: false }); gitalk.render('comment-container1'); });","link":"/self-talking/index.html"}],"posts":[{"title":"Hexo中使用gitalk遇到的问题(持续更新中)","text":"未找到相关的 Issues 进行评论，请联系 XXX 初始化创建 &amp; 登录后，总是会跳回首页 原因： 没有开通gitalk应用 开通好了之后，主题中没有配置gitalk 配置好的仓库出现问题 没有给文章评论进行初始化 解决方案： 没有开通gitalk应用 先进入OAuth Apps进行创建应用的操作 没有https可以使用这个免费的SSL申请工具FreeSSL 开通好了之后，主题中没有配置gitalk 以amazing为例，yml中需要配置12345678910comment: type: gitalk owner: xxx # (required) GitHub user name repo: xxxx # (required) GitHub repository name client_id: xxxx # (required) OAuth application client id client_secret: xxxx # (required) OAuth application client secret admin: 'xxxx' ID: location.pathname # 最好带上这个吧 用pathname来区分issue create_issue_manually: false # false为自动初始化comment仓库（前面申请gitalk时开通的那个库）；true为手动执行comment库的init distraction_free_mode: true # 是否开启快捷键发送消息(Win: Ctrl+enter Mac: Command+enter) 以amazing为例，source/js/comment-issue-data.js中需要配置12345// 评论issues仓库var repoIssuesUrl = \"https://api.github.com/repos/{name}/{repo}/issues\";// 对应仓库 clientId、clientSecret 关于这两个参数的安全问题，gitalk作者有解释：https://github.com/gitalk/gitalk/issues/150var clientId = \"xxxxx\"; // 之前申请的gitalk clientIdvar clientSecret = \"xxxxx\"; // 之前申请的gitalk clientSecret 配置好的仓库出现问题 配置时，gitalk所指定的仓库地址内容有误，请检查url地址是否有误 没有给文章评论进行初始化 手动登录下即可 Error: Network Error 原因： 可能在本地4000的时候访问 未能正确找到仓库 repo，检查一下你的仓库是否配置正确 解决方案： 可能在本地4000的时候访问 部署到远程后查看 未能正确找到仓库 repo，检查一下你的仓库是否配置正确 是不是github仓库的url拼写出错或者字母错误 401原因： 没有使用https 解决方案： 没有使用https 用免费的SSL FreeSSL","link":"/2020/03/31/Hexo%E4%B8%AD%E4%BD%BF%E7%94%A8gitalk%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/03/29/hello-world/"},{"title":"HTTP协议","text":"HTTP简介 HTTP发展历程 什么是HTTP HTTP技术 TCP分层管理 HTTP工作过程 URL和URI和URN HTTP状态码 HTTP传输基础 HTTP报文 断点续传 Content-Type - MIME 参考 HTTP简介HTTP发展历程 HTTP/0.9 - 1990年 HTTP/1.0 - 1996年 - 被记载于RFC1945 HTTP/1.1 - 1997年 - 最初版本RFC2068 - 最终修订为RFC2616 HTTP/2.0 - 2013年 多路复用 就是多个请求都是通过一个TCP连接并发完成；而HTTP/1.1虽然能通过pipeline并发请求，但多个请求之间的响应会被阻塞 HEAD压缩 2.0会对HEADER采用HPACK进行压缩传输,该压缩算法能够节省消息头占用的网络流量 服务器推送 服务器端能够更快的把资源推送给客户端，例如server主动把JS和CSS文件推送给客户端，而不需要客户端解析HTML再发送这些请求。详情 二进制传输数据而非文本格式，而非http1.1的文本格式 什么是HTTP HyperText Transfer Protocol：超文本传输协议（严格是 超文本转移协议） 基于TCP/IP协议基础上运作 3项WWW构建技术 把SGML(Standard Generalized Markup Language, 标准通用标记语言)作为页面的文本标记语言的HTML(HyperText Markup Language, 超文本标记语言) 作为文档传递协议的HTTP 指定文档所在地址的URL(Uniform Resource Locator, 统一资源定位符) HTTP技术TCP分层管理 应用层 决定了向用户提供应用服务时通信的活动 TCP/IP协议族内预存了各类通用的应用服务。如，TFP(File Transfer Protocol, 文件传输协议)和DNS(Domain Name System, 域名系统)服务就是其中两类。 HTTP协议也处于该层 协议：HTTP, FTP, SMTP, DNS Telnet 传输层 该层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。 在传输层有两个性质不同的协议: TCP(Transmission Control Protocol, 传输控制协议)和UDP(User Data Protocal, 用户数据报协议) 网络层(又名网络互联层) 用来处理在网络上流动的数据包。 数据包是网络传输的最小数据单位。 规定了通过怎样的路径(所谓的传输路线)到达对方计算机，并把数据包传送给对方。 在众多的选项内选择一条传输路线 协议：IP 链路层(又名数据链路层，网络接口层) 用来处理连接网络硬件部分。包括控制操作系统、硬件的设备驱动、NIC(Network Interface Card, 网路适配器)，及光纤等物理可见部分(还包括一切传输没接) 硬件上的范畴均在链路层的作用范围之内 协议：ARP(Address Resolution Protocal, 地址解析协议) 物理层 以二进制的方式被传输在 光纤，网线中 协议：ISO2110, IEEE802 该分层属于TCP/IP协议族的规则，而七层协议是OSI(Open System Interconnect) TCP中的应用层包含了OSI中的应用层，表示层，会话层 应用层 操作系统或网络应用程序提供访问网络服务的接口 协议: Telnet、FTP、HTTP 表示层 解决用户信息的语法表示问题，将用户传输的数据转换为适合OSI系统内部使用的传送语法 协议: 无 会话层 不参与具体的传输，只提供包括访问验证和会话管理在内的建立和维护应用之间通信的机制。如 服务器验证用户登录便是会话层完成的 协议: 无 OSI七层参考模型的各个分层的划分遵循4个原则： 同一层中的各网络节点都有相同的层次结构，具有同样的功能。 统一节点内相邻层之间通过接口(可以是逻辑接口)进行通信 七层结构中的每一层使用下一层提供的服务，并且向上层提供服务 不同节点的同等层按照协议实现对等层之间的通信 OSI与TCP/IP的区别 TCP/IP协议中的应用层处理开放式系统互联模型中的第五层、第六层和第七层的功能 TCP/IP协议的传输层不能总是保证在传输层可靠地传输数据包，而开发式系统互联模型可以做到。因为TCP/IP协议提供了一项名为UDP(用户数据报协议)的选择。UDP不能保证可靠的数据包传输 HTTP工作过程 地址解析 1234567客户端浏览器请求这个页面: http://localhost.com:8080/index.html首先从中解出协议名、主机名、端口、对象路径等部分，结果如下：协议名：http主机名：localhost.com端口：8080对象路径：/index.html接着，域名系统DNS解析域名localhost.com，得到主机的IP地址 封装成一个HTTP请求数据包 分装成TCP包，并建立TCP连接（TCP的三次握手） 客户机(Web浏览器)首先要通过网络与服务器建立连接，该连接是通过TCP来完成的，该协议与IP协议共同构建Internet，即注明的TCP/IP协议族。 HTTP是比TCP更高层次的应用层协议，根据规则，只有底层协议建立之后才能进行更高层协议的连接 所以，首先要建立TCP连接，一般TCP连接的端口号是80 这里是8080端口 客户端发送请求命令 服务器响应客户端，并做出响应 而响应头中的Content-Type属性决定了客户端该如何去展现接收到的数据 服务器关闭TCP连接 在服务器响应完毕后，便会关闭TCP连接；如果浏览器在请求头中添加了Connection: keep-alive，则TCP连接在发送后仍然会保持开启状态，浏览器便可以继续通过相同的连接发送请求。保持连接节省了为每个请求建立新连接所需的时间，还节约了网络宽带 客户端发起一次请求后 最大传输单元 MTU Maximum Transimission Unit (以太网)数据链路层发送的数据大小最大可以承受的大小 1500 bits(不同网络类型不同的MTU)；最小是 46 bits 超出部分会分多次进行传输 TCP/UDP包头 20 bits IP包头 20 bits MAC地址 LLC子层 14 bits 不算入MTU中 FCS 4bits 不算入MTU中 URL和URI和URN URI：Uniform Resource Identifier 统一资源标识符 Uniform：规定统一的格式可方便处理多种不同类型的资源，而不用根据上下文环境来识别资源指定的访问方式。 Resource：“可标识的任何东西”。 除了文档文件、图像或服务等能够区别于其他类型的，全都可作为资源。 资源不仅可以使单一的，也可以是多数的集合体。 Identifier：可标识的对象。也称为标识符 就是由某个协议方案表示的资源的定位标识符。 完全的一个抽象概念，而非一个实体的存在；与其说是统一资源标识符，不如说是一个字符串 URL：Uniform Resource Location 统一资源定位符 URL是URI中的一个子集 URN：Uniform Resource Name 统一资源名称 URI的格式： 协议方案是指访问资源所使用的协议类型名称。比如，采用HTTP协议时，协议方案就是http。其它还有ftp, mailto, telnet, file等；标准的URI协议方案有30种左右。 登录信息(认证) 指定用户名和密码作为从服务器端获取资源时必要的登录信息(身份认证)。 服务器地址 使用绝对URI必须指定待访问的服务器地址。 服务器端口号 指定服务器连接的网络端口号。 此项可选，若用户省略则自动使用默认端口号 带层次的文件路径 指定服务器上的文件路径来定位特指的资源 与UNIX系统的文件目录结构相似 查询字符串 针对已指定的文件路径内的资源，可以使用查询字符串传入任意参数。 片段标识符 使用片段标识符通常可标记出已获取资源中的子资源(文档内的某个位置) HTTP状态码 1XX Informational(信息状态码) 接收的请求正在处理 2XX Success(成功状态码) 请求正常处理完毕 200 OK 204 No Content 不返回任何主体部分 206 Partial Content 返回客户端指定的部分资源 3XX Redirection(重定向状态码) 需要进行附加操作以完成请求 301 Moved Permanently 永久性重定向 该资源被分配了新的URI 302 Found 临时性重定向 其它与301一致 303 See Other 由于请求对应的资源存在着一个URI，应使用GET方法定向获取请求的资源。基本与302一致，只是这里明确表示客户端应当采用GET方法。 当301、302、302响应状态码返回时，几乎所有的浏览器都会把POST改成GET，并删除请求报文内的主体，之后请求会自动再次发送。 304 Not Modified 表示客户端发送附件带条件的请求时，服务器端允许请求访问资源，但为满足条件的情况。并不包含任何响应的主体部分。同时与重定向没有关系 4XX Client Error(客户端错误状态码) 服务器无法处理请求 400 Bad Request 请求报文中存在语法错误 401 Unauthorized 发送的请求需要有通过HTTP认证的认证信息。 403 Forbidden 请求资源的访问被服务器拒绝 未获得文件系统的访问授权，访问权限出问题了 404 Not Found 服务器上没有请求的资源 5XX Server Error(服务器错误状态码) 服务器处理请求出错 500 Internal Server Error 服务器端在执行请求时发生了错误，也有可能是Web应用存在的bug或某些临时的故障 503 Service Unavailable 表明服务器暂时处理超负载或正在进行停机维护，现在无法请求。 HTTP传输基础 请求必定由客户端发出，而服务端回复响应 请求报文12345// GET表示请求访问服务器的类型，称为方法(method)// /index.htm指明了请求访问的资源对象，也叫作请求URI(request-URI)// HTTP/1.1, 即HTTP的版本号，用来提示客户端使用的HTTP协议功能GET /index.htm HTTP/1.1Host: hackr.jp HTTP是不保存状态的协议，即无状态(stateless)协议。HTTP协议自身不对请求和响应之间的通信状态进行保存。也就是说，协议对于发送过的请求或响应都不做持久化处理 告知服务器意图的HTTP方法 GET: 获取资源 请求访问已被URI识别的资源 指定的资源经服务器端解析后返回响应内容 1.0 1.1 POST: 传输实体主体 与GET方法类似，但GET不用于传输主体 1.0 1.1 PUT: 传输文件 类似于FTP协议的文件上传；但任何人都可以上传文件，存在安全问题 1.0 1.1 HEAD: 获得报文首部 与GET方法类似，只是不反悔报文主体部分。 1.0 1.1 DELETE: 删除文件 与PUT方法相反；DELETE方法按请求URI删除指定的资源 1.0 1.1 OPTIONS: 询问支持的方法 查询针对请求URI指定的资源文件的方法 1.1 TRACE: 追踪路径 让Web服务器端将之前的请求通信还回给客户端 1.1 CONNECT: 要求用隧道协议连接代理 要求在与代理服务器通信时建立隧道，实现用隧道协议进行TCP通信。 主要使用SSL(Secure Sockets Layer, 安全套接层)和TLS(Tansport Layer Security, 传输层安全)协议把通信内容加密后经网络隧道传输 CONNECT方法格式： Connect 代理服务器名: 端口号 HTTP版本 1.1 此外 还有LINK和UNLINK方法，但已被HTTP/1.1废弃 HTTP报文 报文首部 请求行：用于请求的方法，请求URI和HTTP版本 状态行：表明响应结果的状态码，原因短语和HTTP版本 首部字段：表示请求和响应的各种条件和属性的各类首部。一般有4种首部： 通用首部(General) 请求报文和响应报文两方都会使用的首部 Cache-Control 操作缓存的工作机制 该指令的值可查阅《图解HTTP》中P84-P91 Pragma 兼容以HTTP/1.0为基准的中间服务器 其它与Cache-Control一致 Connection 在客户端发送请求和服务器返回响应内，使用该字段可以控制不再转发给代理的首部字段(即Hop-by-hop首部) 管理持久连接 Date 创建HTTP报文的日期和时间 Transfer-Encoding 规定了传输报文主体时采用的编码方式 Warning, Trailer，Upgrade，Via等 可查看HTTP通用首部字段类型详解 请求首部(Request Header) 从客户端向服务端发送请求报文时使用的首部。补充了请求的附加内容、客户端信息、响应内容相关优先级等信息 Accept 通知服务器，用户代理能够处理的媒体类型及媒体类型的相对优先级 文本文件 text/html, text/plain, text/css…, application/xhtml+xml, application/xml 图片文件 image/jpeg, image/gif, image/png… 视频文件 video/mpeg, video/quicktime… 应用程序使用的二进制文件 application/octet-stream, application/zip… Accept-Encoding 告知服务器用户代理支持的内容编码及内容编码的优先级顺序。 值可以为 gzip, compress, deflate, identity Host 告知服务器请求的资源所处的互联网主机名和端口号 Referer 告知服务器请求的原始资源的URI 可能会有安全问题，原始资源的URI中的查询字符串可能还有ID和密码等保密信息 User-Agent 创建请求的浏览器和用户代理名称等信息 经过中间服务器时也可能被添加上代理服务器的名称 其它可查阅HTTP请求首部字段类型详解 响应首部(Response Header) 从服务端向客户端返回响应报文时使用的首部。补充了响应的附加内容，也会要求客户端附加额外的内容信息。 Age 告知服务器，源服务器在多久前创建了响应 指缓存后的响应再次发起认证到认证完成的时间值。代理创建响应时必须加上首部字段Age ETag 告知客户端实体标识。它是一种可将资源以字符串形式做唯一标识的方式。服务器会为每份资源分配对应的ETag值。 强ETag值 不论实体发生多么细微的变化都会改变其值 弱ETag值 只用于提示资源是否相同。只有资源发生了根本改变，产生差异时才会改变其值；这时，会在字段值最开始处附加 W/ Location 将响应接收方引导至某个与请求URI位置不同的资源；该字段会配合3xx:Redirection的响应，提供重定向的URI Server 告知客户端当前服务器上安装的HTTP服务器应用程序的信息 Vary 对缓存进行控制。源服务器会向代理服务器传达关于本地缓存使用方法的命令。 其它可查阅HTTP响应首部字段类型详解 - 实体首部：针对请求报文和响应报文的实体部分使用的首部。补充了资源内容更新时间等实体有关的信息 - Allow 用于通知客户端能够支持Request-URI指定资源的所有HTTP方法。当服务器接收到不支持的HTTP方法时，会以状态码405 Method Not Allowed作为响应返回。与此同时，还会把所有能支持的HTTP方法写入首部字段Allow后返回到客户端 - Content-Encoding 告知客户端服务器对实体的主体部分选用的内容编码方式。内容编码是指在不丢失实体信息的前提下所进行的压缩 支持的编码与Accept-Encoding所支持的一致 - Content-Length 表明了实体主体部分的大小(单位是字节)；如果对实体主体进行内容编码传输时，便不会再使用Content-Length字段 - Content-Type 说明了实体主体内对象的媒介类型。与Accept一样，字段值用type/subtype形式赋值 - Last-Modified 指明资源最终修改的时间。一般来说，这个值就是Request-URI指定资源被修改的时间。 - 为Cookie服务的首部字段 - Set-Cookie - Cookie - 其他：非HTTP的RFC定义的首部 提升传输速率 压缩传输的内容编码，以下是常用的几种压缩 gzip (GUN zip) compress (UNIX系统的标准压缩) deflate (zlib) identity (不进行编码) 分割发送的分块传输编码: 将数据分割成多块，能够让浏览器逐步显示页面 发送多种数据的多部分对象集合 Content-type- multipart/form-data: 在Web表单文件上传时使用 - multiparty/byteranges: 状态码206(Partial Content, 部分内容)响应报文包含了多个范围内容时使用 - MIME: (Multipurpose Internet Mail Extensions, 多用途网络邮件扩展) 获取部分内容的范围请求 Content-Range 断点续传 内容协商返回最合适的内容 Accept Accept-Charset Accept-Encoding Accept-Language Content-Language 内容协商技术有3种类型： 服务器驱动协商(Server-driven Negotiation) 客户端驱动协商(Agent-driven Negotiation) 透明协商(Transparent Negotiation) 断点续传 通过改变现有的业务接口来实现断点续传 不需要改变现有的业务接口进行 需要考虑的两个重要问题 终端知道当前的文件和上一次加载的文件是不是内容发送了变化，如果有变化需要重新从offset 0 的位置开始下载 终端记录好上次成功下载到的offset，告诉server端，server端支持从特定的offset开始吐数据 解决以上两个问题的方案 ETAG字段标识是否内容发生了变化 Nginx &gt; 1.3.3自带ETAG模块 也就是通过前端header中的两个字段来实现 Range 指定第一个字节的位置和最后一个字节的位置 (请求头)1Range: (unit=first byte pos) - [last byte pos] Content-Range 指定整个实体中的一部分的插入位置，他也指示了整个实体的长度。在服务器向客户端返回一个部分响应，它必须描述响应覆盖的范围和整个实体长度。(响应头)1Content-Range: bytes (unit first byte pos) - [last byte pos]/[entity length] 实现例子 123curl --header \"Range: bytes=0-10000000\" http://petkit-img3.oss-cn-hangzhou.aliyuncs.com/img/file/p2_manual_cn -o part1curl --header \"Range: bytes=10000001-11766964\" http://petkit-img3.oss-cn-hangzhou.aliyuncs.com/img/file/p2_manual_cn -o part2cat part1 part2 &gt;&gt; a.pdf Content-Type - MIME MIME类型就是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。 MIME(Multipurpose Internet MailExtensions, 多功能网络邮件扩充服务) 92年诞生之初用于电子邮件系统，后来用于浏览器。 服务器会将它们发送的多媒体数据的类型告诉浏览器，而通知手段就是说嘛该多媒体数据的MIME类型，让浏览器知道服务器给它的是个什么文件，应该用什么程序或插件来打开它。 浏览器收到文件后，会进入插件系统进行查找，查找出哪种插件可以识别读取接收到的文件。 如果浏览器找不到所对应的插件，便会提醒用户缺少某插件，或者直接选择某现有插件来试图读取接收到的文件，当然后者可能会导致系统的崩溃。 传输的信息中缺少MIME标识可能导致的情况很难估计，因为某些计算机系统可能不会出现什么故障，但某些计算机可能会因此而崩溃。 每个MIME类型有两部分组成，前面是数据的大类别，列入声音audio、图像image等，后面定义具体的种类；常用的MIME类型有 类型 后缀 Content-Type 超文本标记语言文本 .html text/html 普通文本 .text text/plain RTF文本 .rtf application/rtf GIF图形 .gif image/gif JPEG图形 .jpeg, .jpg image/jpeg au声音文件 .au audio/basic MIDI音乐文件 .mid, .midi audio/midi, audio/x-midi RealAudio音乐文件 .ra, .ram audio/x-pn-realaudio MPEG文件 .mpg, .mpeg video/mpeg AVI文件 .avi video/x-msvideo GZIP文件 .gz application/x-gzip TAR文件 .tar application/x-tar MIME信息头有 MIME-Version 提供了所用MIME的版本号。该值基本为1.0 Content-Type 定义了数据的类型，以便数据能被适当地处理。 注意任何一个二进制附件都应该被叫做application/octet-stream Content-Transfer-Encoding 它说明了对数据所执行的编码方式，客户端/MUA将用它对附件进行解码。(所有首部字段中最重要的一个) Content-Description 任何信息段内容的自由文本描述。描述必须使用us-ascii码 (可选字段) Content-Disposition 实验性字段；用于给客户端/MUA提供提示，来决定是否在行内显示附件或作为单独的附件。 MIME段头（出现在实际的MIME附件部分的头），除了MIME-Version头，可以拥有以上投资端。如果一个MIME头是信息块的一部分，它将作用于整个信息体。如，如果Content-Transfer-Encoding显示在信息(指整个信息)投中，它应用于整个信息体，但是如果它显示在一个MIME段里，那它只能用于那个段中。 Content-Disposition: 一个试验性的头，它用于给客户程序/MUA提供提示，来决定是否在行内显示附件或作为单独的附件。 MIME段头（出现在实际的MIME附件部分的头），除了MIME-Version头，可以拥有以上任何头字段。如果一个MIME头是信息块的一部分，它将作用于整个信息体。例如，如果Content-Transfer-Encoding显示在信息（指整个信息）头中，它应用于整个信息体，但是如果它显示在一个MIME段里，它”只能”用于那个段中. 参考HTTP/2–HPACK算法HTTP2.0提速，让网站飞起来-HTTP2.0优势详解HTML服务器推送技术简介HTTP2.0服务器推送技术的创新OSI七层与TCP/IP五层网络架构详解HTTP文件断点续传的原理MIME类型Content-TypeTCP/IP协议栈与数据包封装","link":"/2020/03/29/HTTP%E5%8D%8F%E8%AE%AE/"}],"tags":[{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"gitalk","slug":"gitalk","link":"/tags/gitalk/"},{"name":"http","slug":"http","link":"/tags/http/"}],"categories":[{"name":"hexo","slug":"hexo","link":"/categories/hexo/"},{"name":"网络原理","slug":"网络原理","link":"/categories/%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]}